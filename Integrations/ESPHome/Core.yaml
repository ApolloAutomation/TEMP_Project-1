substitutions:
  version: "25.6.23.1"
  device_description: TEMP_PRO-1 made by Apollo Automation - version ${version}.

esphome:
  name: temp-pro-1
  on_boot:
    priority: -100  # Run after everything else is initialized
    then:
      - delay: 5s
      - lambda: |-
          // Force initial updates on boot
          id(sht_temperature).publish_state(id(sht_temperature_raw).state);
          id(sht_humidity).publish_state(id(sht_humidity_raw).state);
          id(last_temp_update) = millis();
          id(last_humidity_update) = millis();

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 8MB
  framework:
    type: esp-idf

api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: last_temp_update
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: last_humidity_update
    type: uint32_t
    restore_value: no
    initial_value: '0'

i2c:
  sda: GPIO16
  scl: GPIO17
  id: bus_a

web_server:  
  port: 80

one_wire:
  - platform: gpio
    pin: GPIO6

# Buzzer
output:
  - platform: ledc
    pin: GPIO8
    id: buzzer

rtttl:
  id: rtttl_buzzer
  output: buzzer

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
            }

  - platform: template
    name: Temperature Within Range
    id: temp_within_range
    lambda: 'return (id(sht_temperature).state <= id(max_temp).state) && (id(sht_temperature).state >= id(min_temp).state);'

  - platform: template
    name: Humidity Within Range
    id: humidity_within_range
    lambda: 'return (id(sht_humidity).state <= id(max_humidity).state) && (id(sht_humidity).state >= id(min_humidity).state);'

  - platform: template
    name: Alarm Active
    id: alarm_active
    lambda: 'return (id(alarm_outside_temp_range).state && !id(temp_within_range).state) || (id(alarm_outside_humidity_range).state && !id(humidity_within_range).state);'
    on_release:
      then:
        - light.turn_off: rgb_light

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    disabled_by_default: true

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: sht3xd
    temperature:
      name: "Temperature Raw"
      id: sht_temperature_raw
      internal: true
    humidity:
      name: "Relative Humidity Raw"
      id: sht_humidity_raw
      internal: true
    update_interval: 10s

  # Template sensors with configurable intervals
  - platform: template
    name: "Temperature"
    id: sht_temperature
    lambda: 'return id(sht_temperature_raw).state;'
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: template
    name: "Relative Humidity"
    id: sht_humidity
    lambda: 'return id(sht_humidity_raw).state;'
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement
    accuracy_decimals: 1
    update_interval: never

  - platform: sen5x
    id: sen54
    pm_1_0:
      name: "PM <1µm Weight concentration"
      id: pm_1_0
      disabled_by_default: true
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 9
            send_every: 1
    pm_2_5:
      name: "PM <2.5µm Weight concentration"
      id: pm_2_5
      disabled_by_default: true
      accuracy_decimals: 1
      filters:
        - sliding_window_moving_average:
            window_size: 9
            send_every: 1
    pm_4_0:
      name: "PM <4µm Weight concentration"
      id: pm_4_0
      disabled_by_default: true
      accuracy_decimals: 1
    pm_10_0:
      name: "PM <10µm Weight concentration"
      id: pm_10_0
      disabled_by_default: true
      accuracy_decimals: 1
    nox:
      name: "NOX Index"
      id: sen_nox
      disabled_by_default: true
      accuracy_decimals: 1
    voc:
      name: "VOC Index"
      id: sen_voc
      disabled_by_default: true
      algorithm_tuning:
        index_offset: 100
        learning_time_offset_hours: 12
        learning_time_gain_hours: 12
        gating_max_duration_minutes: 180
        std_initial: 50
        gain_factor: 230
      filters:
        - sliding_window_moving_average:
            window_size: 9
            send_every: 1
    temperature_compensation:
      offset: 0
      normalized_offset_slope: 0
      time_constant: 0
    store_baseline: true
    update_interval: 10s

  - platform: template
    name: "PM 0.3 To 1 µm"
    id: pm0_3_to_1
    disabled_by_default: true
    lambda: return id(pm_1_0).state;
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
    
  - platform: template
    name: "PM 1 To 2.5 µm"
    id: pm1_to_2_5
    disabled_by_default: true
    lambda: return std::max(0.0f, id(pm_2_5).state - id(pm_1_0).state);
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s
  
  - platform: template
    name: "PM 2.5 To 4 µm"
    id: pm2_5_to_4
    disabled_by_default: true
    lambda: return std::max(0.0f, id(pm_4_0).state - id(pm_2_5).state);
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

  - platform: template
    name: "PM 4 To 10 µm"
    id: pm4_to_10
    disabled_by_default: true
    lambda: return std::max(0.0f, id(pm_10_0).state - id(pm_4_0).state);
    unit_of_measurement: "µg/m³"
    state_class: measurement
    icon: mdi:air-filter
    update_interval: 10s

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO4
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 4
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: template
    name: "Update Firmware"
    id: update_firmware
    entity_category: config
    on_press:
      then:
        - lambda: |-
            id(update_http_request).perform(true);
    
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

number:
  - platform: template
    id: min_temp
    name: Min Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: -20
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: max_temp
    name: Max Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: 200
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: min_humidity
    name: Min Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 0
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  - platform: template
    id: max_humidity
    name: Max Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 100
    optimistic: true
    update_interval: never
    mode: box
    entity_category: config

  # Configurable temperature and humidity intervals (in hours)
  - platform: template
    id: temperature_update_interval
    name: "Temperature Update Interval"
    min_value: 0.1
    max_value: 24
    step: 0.1
    unit_of_measurement: 'h'
    initial_value: 0.1
    optimistic: true
    restore_value: true
    mode: box
    entity_category: config
    on_value:
      then:
        - lambda: |-
            // Force immediate temperature update when interval changes
            id(sht_temperature).publish_state(id(sht_temperature_raw).state);
            id(last_temp_update) = millis();

  - platform: template
    id: humidity_update_interval
    name: "Humidity Update Interval"
    min_value: 0.1
    max_value: 24
    step: 0.1
    unit_of_measurement: 'h'
    initial_value: 0.1
    optimistic: true
    restore_value: true
    mode: box
    entity_category: config
    on_value:
      then:
        - lambda: |-
            // Force immediate humidity update when interval changes
            id(sht_humidity).publish_state(id(sht_humidity_raw).state);
            id(last_humidity_update) = millis();

switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true

  - platform: gpio
    pin: GPIO7
    name: "Accessory Power"
    id: accessory_power
    restore_mode: ALWAYS_ON
    setup_priority: 1100
    internal: true

  - platform: template
    name: "Alarm Outside Temp Range"
    id: alarm_outside_temp_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    
  - platform: template
    name: "Alarm Outside Humidity Range"
    id: alarm_outside_humidity_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

interval:
  - interval: 10s
    startup_delay: 60s
    then:
      - if:
          condition:
            lambda: !lambda |-
              return id(alarm_active).state;
          then:
            - lambda: !lambda |-
                id(rgb_light).turn_on().set_effect("Fast Pulse").perform();
                id(rgb_light).turn_on().set_rgb(1, 0, 0).set_transition_length(0).perform();
                id(rtttl_buzzer).play("siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e;");

  # Temperature and humidity configurable intervals
  - interval: 60s
    then:
      - lambda: |-
          // Temperature update check (hours to milliseconds)
          uint32_t temp_interval_ms = id(temperature_update_interval).state * 3600 * 1000;
          if (millis() - id(last_temp_update) >= temp_interval_ms) {
            id(sht_temperature).publish_state(id(sht_temperature_raw).state);
            id(last_temp_update) = millis();
          }
          
          // Humidity update check (hours to milliseconds)
          uint32_t humidity_interval_ms = id(humidity_update_interval).state * 3600 * 1000;
          if (millis() - id(last_humidity_update) >= humidity_interval_ms) {
            id(sht_humidity).publish_state(id(sht_humidity_raw).state);
            id(last_humidity_update) = millis();
          }

text_sensor:
  - platform: template
    name: "OTA URL"
    id: ota_url
    entity_category: "diagnostic"
    internal: true